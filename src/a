#include<cstdio>
#include<stdlib.h>

typedef void (*fn_ptr)(void *);
typedef struct SIGNAL_T {
    fn_ptr *fn_ptrs;
    int capacity;
    int size;
} Signal;

#define SIGNAL_DEFAULT_CAP 5
#define SIGNAL_GROWTH_SIZE 5

Signal signal_new(int capacity);
void signal_fire(Signal *signal, void *arg);
void signal_connect(Signal *signal, fn_ptr fn);
void signal_disconnect(Signal *signal, fn_ptr fn_remove);
void signal_free(Signal *signal);


Signal signal_new(int capacity) {
    return Signal {
        .fn_ptrs = (fn_ptr*)malloc(sizeof(void*) * capacity),
        .capacity = capacity,
        .size = 0,
    };
}

void signal_fire(Signal *signal, void *arg) {
    for (int i = 0; i < signal->size; i++) {
        fn_ptr fn = (fn_ptr)signal->fn_ptrs[i];
        fn(arg);
    }
}

void expand_signal_array(Signal *signal) {
    signal->capacity += SIGNAL_GROWTH_SIZE;
    void *realloc_result = realloc(signal->fn_ptrs, signal->capacity * sizeof(fn_ptr));
    if (realloc_result == NULL) {
        fprintf(stderr, "!!! ERROR: FAILED TO REALLOC MEM TO EXTEND SIGNAL ARRAY !!!\n");
        exit(EXIT_FAILURE);
    }
    *(signal->fn_ptrs) = (fn_ptr)realloc_result;
}

void signal_connect(Signal *signal, fn_ptr fn) {
    if (signal->capacity == signal->size-1) {
        expand_signal_array(signal);
    }
    signal->fn_ptrs[signal->size] = fn;
    signal->size += 1;
}

void signal_disconnect(Signal *signal, fn_ptr fn_remove) {
    for (int i = 0; i < signal->size; i++) {
        fn_ptr fn = signal->fn_ptrs[i];
        if (fn != fn_remove) continue;

        if (signal->size-1 == i) {
            signal->size -= 1;
            break;
        }

        signal->fn_ptrs[i] = signal->fn_ptrs[signal->size-1];
        signal->size -= 1;
    }
}

void signal_free(Signal *signal) {
    signal->size = -99999;
    signal->capacity = -99999;
    free(signal->fn_ptrs);
}


void do_stuff_1(void *a) {
    printf("do_stuff_1 a=%d\n", *((int*)a));
}

void do_stuff_2(void *a) {
    printf("do_stuff_2 a=%d\n", *((int*)a));
}

void do_stuff_3(void *a) {
    printf("do_stuff_3 a=%d\n", *((int*)a));
}

int main(int argv, char **argc) {
    Signal test = signal_new(SIGNAL_DEFAULT_CAP);

    signal_connect(&test, &do_stuff_1);
    signal_connect(&test, &do_stuff_2);
    signal_connect(&test, &do_stuff_3);
    signal_disconnect(&test, &do_stuff_2);

    int a = 25;
    signal_fire(&test, (void*)&a);

    signal_free(&test);

    return EXIT_SUCCESS;
}